{"version":3,"sources":["core/store/employee/employeeSelectors.ts","hooks/useThunkDispatch.ts","config/api.ts","core/services/serviceGenerics.ts","core/services/employeeService.ts","components/EmployeeTableRow.tsx","core/store/employee/employeeActions.ts","core/store/employee/employeeActionTypes.ts","components/EmployeeTable.tsx","core/models/Employee.ts","core/services/departmentService.ts","hooks/useDepartments.ts","core/store/department/departmentActions.ts","core/store/department/departmentActionTypes.ts","core/services/jobService.ts","hooks/useJobs.ts","core/store/job/jobActions.ts","core/store/job/jobActionTypes.ts","components/FormikTextField.tsx","components/EmployeeFields.tsx","components/CreateEmployeeDialog.tsx","components/EmployeeActionBar.tsx","components/EditEmployeeDialog.tsx","pages/EmployeePage.tsx","core/util.ts","core/store/employee/employeeReducer.ts","core/store/department/departmentReducer.ts","core/store/job/jobReducer.ts","core/store/rootReducer.ts","core/store/store.ts","App.tsx","index.tsx"],"names":["selectEmployeeIds","state","employees","allIds","selectSelectedEmployee","selectedId","byId","useThunkDispatch","useDispatch","api","axios","create","baseURL","ReadServiceImpl","path","findAll","get","findById","id","this","CRUDServiceImpl","entity","post","updateById","put","deleteById","delete","prepareEmployee","employee","job","name","prepareResponse","response","data","map","employeeService","baseService","then","isAhvNumberAvailable","ahvNumber","excludeId","url","res","isPersonalNumberAvailable","personalNumber","emptyJob","undefined","description","emptyDepartment","useStyle","makeStyles","theme","editButton","deleteButton","color","palette","error","main","EmployeeTableRow","props","classes","useSelector","selectEmployee","firstName","lastName","email","birthDate","department","departmentName","jobName","jobDescription","dispatch","TableRow","TableCell","moment","format","IconButton","title","className","size","onClick","type","payload","editEmployee","delete_","deleteEmployee","headerCell","fontWeight","typography","fontWeightBold","labels","EmployeeTable","employeeIds","useEffect","getState","loaded","Promise","resolve","load","Table","TableHead","label","key","TableBody","employeeSchema","yup","required","matches","test","value","a","isBefore","notOneOf","departmentService","useDepartments","departments","all","jobService","useJobs","jobs","FormikTextField","useField","field","meta","errorText","touched","TextField","helperText","defaultProps","variant","fullWidth","EmployeeFields","Grid","container","direction","spacing","item","xs","autoFocus","InputLabelProps","shrink","select","MenuItem","disabled","actions","padding","emptyEmployee","CreateEmployeeDialog","onClose","Dialog","DialogTitle","initialValues","onSubmit","add","catch","console","createEmployee","validationSchema","DialogContent","DialogActions","Button","root","display","addButton","success","EmployeeActionBar","useState","dialogOpen","setDialogOpen","Toolbar","open","EditEmployeeDialog","handleClose","update","updateEmployee","EmployeePage","TableContainer","normalizeArray","array","forEach","initialState","removeEmployee","filter","eId","employeeReducer","action","departmentReducer","jobReducer","rootReducer","combineReducers","middlewares","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","App","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8770fe17.chunk.js","sourcesContent":["import Employee from \"../../models/Employee\";\r\nimport {RootState} from \"../rootReducer\";\r\n\r\ntype Selector<R> = (state: RootState) => R;\r\n\r\ntype SelectorWithProps<P extends {}, R> = (props: P) => Selector<R>;\r\n\r\nexport const selectEmployeeIds: Selector<string[]> = state => state.employees.allIds\r\n\r\nexport const selectEmployee: SelectorWithProps<{ id: string }, Employee> = props => state => state.employees.byId[props.id];\r\n\r\nexport const selectSelectedEmployee: Selector<Employee | null> = state => state.employees.selectedId ? state.employees.byId[state.employees.selectedId] : null;","import {useDispatch} from \"react-redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {RootAction, RootState} from \"../core/store/rootReducer\";\r\n\r\nconst useThunkDispatch = () => useDispatch<ThunkDispatch<RootState, void, RootAction>>()\r\n\r\nexport default useThunkDispatch;","import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:8080\"\r\n})\r\n\r\nexport default api","import { AxiosResponse } from \"axios\";\r\nimport api from \"../../config/api\";\r\n\r\ntype DomainEntity = {\r\n    id?: string | -1\r\n}\r\n\r\nexport interface ReadService<T extends DomainEntity> {\r\n    findAll: () => Promise<AxiosResponse<T[]>>\r\n    findById: (id: string) => Promise<AxiosResponse<T>>\r\n}\r\n\r\nexport interface CRUDService<T extends DomainEntity> extends ReadService<T> {\r\n    create: (entity: T) => Promise<AxiosResponse<T>>\r\n    updateById: (id: string, entity: T) => Promise<AxiosResponse<T>>\r\n    deleteById: (id: string) => Promise<AxiosResponse<void>>\r\n}\r\n\r\nexport class ReadServiceImpl<T extends DomainEntity> implements ReadService<T> {\r\n    protected path: string\r\n\r\n    constructor(path: string) {\r\n        this.path = path\r\n    }\r\n\r\n    findAll = () => api.get<T[]>(this.path)\r\n\r\n    findById = (id: string) => api.get<T>(`${this.path}/${id}`)\r\n}\r\n\r\nexport class CRUDServiceImpl<T extends DomainEntity> extends ReadServiceImpl<T> implements CRUDService<T> {\r\n\r\n    create = (entity: T) => api.post<T>(this.path, entity)\r\n\r\n    updateById = (id: string, entity: T) => api.put<T>(`${this.path}/${id}`, entity)\r\n\r\n    deleteById = (id: string) => api.delete<void>(`${this.path}/${id}`)\r\n\r\n}","import { AxiosResponse } from \"axios\";\r\nimport api from \"../../config/api\";\r\nimport Employee from \"../models/Employee\";\r\nimport { CRUDService, CRUDServiceImpl } from \"./serviceGenerics\";\r\n\r\ninterface EmployeeService extends CRUDService<Employee> {\r\n\r\n    isAhvNumberAvailable: (ahvNumber: string, excludeId?: string) => Promise<boolean>\r\n\r\n    isPersonalNumberAvailable: (personalNumber: string, excludeId?: string) => Promise<boolean>\r\n\r\n}\r\n\r\ntype EmployeeResponse = AxiosResponse<Employee> | AxiosResponse<Employee[]>\r\n\r\nconst isEmployee = (value: any): value is Employee => {\r\n    if((value as Employee).id) {\r\n        return true;\r\n    } else return false;\r\n}\r\n\r\nconst prepareEmployee = (employee: Employee) => {\r\n    let job = employee.job\r\n\r\n    if(!job) {\r\n        job = {\r\n            id: -1,\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    return {\r\n        ...employee,\r\n        job\r\n    }\r\n}\r\n\r\nconst prepareResponse = <T extends EmployeeResponse>(response: T): T => {\r\n    if(isEmployee(response.data)) {\r\n        return {\r\n            ...response,\r\n            data: prepareEmployee(response.data)\r\n        }\r\n    } else {\r\n        return {\r\n            ...response,\r\n            data: response.data.map(prepareEmployee)\r\n        }\r\n    }\r\n}\r\n\r\nclass EmployeeServiceImpl implements EmployeeService {\r\n\r\n    private baseService: CRUDService<Employee> = new CRUDServiceImpl(\"/employees\")\r\n\r\n    findAll = () => this.baseService.findAll().then(prepareResponse)\r\n\r\n    findById = (id: string) => this.baseService.findById(id).then(prepareResponse)\r\n\r\n    create = (employee: Employee) => this.baseService.create(employee).then(prepareResponse)\r\n\r\n    updateById = (id: string, employee: Employee) => this.baseService.updateById(id, employee).then(prepareResponse)\r\n\r\n    deleteById = this.baseService.deleteById\r\n\r\n    isAhvNumberAvailable = (ahvNumber: string, excludeId?: string) => {\r\n        let url = `/employees/exists?ahvNumber=${ahvNumber}`;\r\n\r\n        if(excludeId) {\r\n            url += `&excludeId=${excludeId}`\r\n        }\r\n\r\n        return api.get<boolean>(url).then(res => !res.data)\r\n    }\r\n\r\n    isPersonalNumberAvailable = (personalNumber: string, excludeId?: string) => {\r\n        let url = `/employees/exists?personalNumber=${personalNumber}`\r\n\r\n        if(excludeId) {\r\n            url += `&excludeId=${excludeId}`\r\n        }\r\n\r\n        return api.get<boolean>(url).then(res => !res.data)\r\n    }\r\n\r\n}\r\n\r\nconst employeeService: EmployeeService = new EmployeeServiceImpl();\r\n\r\nexport default employeeService;","import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport Job from \"../core/models/Job\";\r\nimport {IconButton, makeStyles, TableCell, TableRow} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutline';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport useThunkDispatch from \"../hooks/useThunkDispatch\";\r\nimport {deleteEmployee, editEmployee} from \"../core/store/employee/employeeActions\";\r\nimport {selectEmployee} from \"../core/store/employee/employeeSelectors\";\r\nimport Department from '../core/models/Department';\r\nimport moment from 'moment';\r\n\r\ntype EmployeeTableRowProps = {\r\n    id: string\r\n}\r\n\r\nconst emptyJob: Job = {\r\n    id: undefined!,\r\n    name: \"-\",\r\n    description: \"-\"\r\n}\r\n\r\nconst emptyDepartment: Department = {\r\n    id: undefined!,\r\n    name: \"-\"\r\n}\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    editButton: {\r\n        \r\n    },\r\n    deleteButton: {\r\n        color: theme.palette.error.main\r\n    }\r\n}))\r\n\r\nconst EmployeeTableRow = (props: EmployeeTableRowProps) => {\r\n\r\n    const classes = useStyle();\r\n\r\n    const {\r\n        id,\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        ahvNumber,\r\n        birthDate,\r\n        personalNumber,\r\n        department: {\r\n            name: departmentName\r\n        } = emptyDepartment,\r\n        job: {\r\n            name: jobName,\r\n            description: jobDescription\r\n        } = emptyJob\r\n    } = useSelector(selectEmployee(props))\r\n\r\n    const dispatch = useThunkDispatch();\r\n\r\n    const handleEdit = () => {\r\n        dispatch(editEmployee(id!))\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        dispatch(deleteEmployee(id!))\r\n    }\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell>\r\n                {firstName}\r\n            </TableCell>\r\n            <TableCell>\r\n                {lastName}\r\n            </TableCell>\r\n            <TableCell>\r\n                {email}\r\n            </TableCell>\r\n            <TableCell>\r\n                {ahvNumber}\r\n            </TableCell>\r\n            <TableCell>\r\n                {moment(birthDate).format(\"DD.MM.YYYY\")} \r\n            </TableCell>\r\n            <TableCell>\r\n                {personalNumber}\r\n            </TableCell>\r\n            <TableCell>\r\n                {departmentName}\r\n            </TableCell>\r\n            <TableCell>\r\n                {jobName}\r\n            </TableCell>\r\n            <TableCell>\r\n                {jobDescription}\r\n            </TableCell>\r\n            <TableCell>\r\n                <IconButton title=\"Edit\" className={classes.editButton} size={\"small\"} onClick={handleEdit}>\r\n                    <EditIcon />\r\n                </IconButton>\r\n                <IconButton title=\"Delete\" className={classes.deleteButton} size={\"small\"} onClick={handleDelete}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n\r\n}\r\n\r\nexport default EmployeeTableRow","import Employee from \"../../models/Employee\";\r\nimport EmployeeAction, {\r\n    ADD_EMPLOYEE,\r\n    DELETE_EMPLOYEE,\r\n    EDIT_EMPLOYEE,\r\n    LOAD_EMPLOYEES,\r\n    STOP_EDIT_EMPLOYEE,\r\n    UPDATE_EMPLOYEE\r\n} from \"./employeeActionTypes\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport employeeService from \"../../services/employeeService\";\r\nimport {RootAction, RootState} from \"../rootReducer\";\r\n\r\nconst load: (employees: Employee[]) => EmployeeAction = employees => ({\r\n    type: LOAD_EMPLOYEES,\r\n    payload: {\r\n        employees\r\n    }\r\n})\r\n\r\nconst add: (employee: Employee) => EmployeeAction = employee => ({\r\n    type: ADD_EMPLOYEE,\r\n    payload: {\r\n        employee\r\n    }\r\n})\r\n\r\nconst update: (id: string, employee: Employee) => EmployeeAction = (id, employee) => ({\r\n    type: UPDATE_EMPLOYEE,\r\n    payload: {\r\n        id, employee\r\n    }\r\n})\r\n\r\nconst delete_: (id: string) => EmployeeAction = id => ({\r\n    type: DELETE_EMPLOYEE,\r\n    payload: {\r\n        id\r\n    }\r\n})\r\n\r\nexport const editEmployee: (id: string) => EmployeeAction = id => ({\r\n    type: EDIT_EMPLOYEE,\r\n    payload: {\r\n        id\r\n    }\r\n})\r\n\r\nexport const stopEditEmployee: () => EmployeeAction = () => ({\r\n    type: STOP_EDIT_EMPLOYEE\r\n})\r\n\r\nexport const loadEmployees: () => ThunkAction<Promise<void>, RootState, void, RootAction> = () => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    if(!state.employees.loaded) {\r\n        return employeeService.findAll()\r\n            .then(res => res.data)\r\n            .then(employees => {\r\n                dispatch(load(employees));\r\n            })\r\n    } else {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nexport const createEmployee: (employee: Employee) => ThunkAction<Promise<void>, RootState, void, RootAction> = (employee) => dispatch => {\r\n    return employeeService.create(employee)\r\n        .then(res => res.data)\r\n        .then(employee => {\r\n            dispatch(add(employee))\r\n        })\r\n        .catch(error => console.error(error.response))\r\n}\r\n\r\nexport const updateEmployee: (employee: Employee) => ThunkAction<Promise<void>, RootState, void, RootAction> = (employee) => dispatch => {\r\n    return employeeService.updateById(employee.id!, employee)\r\n        .then(res => res.data)\r\n        .then(employee => {\r\n            dispatch(update(employee.id!, employee))\r\n        })\r\n        .catch(error => console.error(error.response));\r\n}\r\n\r\nexport const deleteEmployee: (id: string) => ThunkAction<Promise<void>, RootState, void, RootAction> = id => dispatch => {\r\n    return employeeService.deleteById(id)\r\n        .then(() => {\r\n            dispatch(delete_(id))\r\n        })\r\n}","import Employee from \"../../models/Employee\";\r\n\r\nexport const LOAD_EMPLOYEES = 'LOAD_EMPLOYEES'\r\nexport const ADD_EMPLOYEE = 'ADD_EMPLOYEE'\r\nexport const UPDATE_EMPLOYEE = 'UPDATE_EMPLOYEE'\r\nexport const DELETE_EMPLOYEE = 'DELETE_EMPLOYEE'\r\nexport const EDIT_EMPLOYEE = 'EDIT_EMPLOYEE'\r\nexport const STOP_EDIT_EMPLOYEE = 'STOP_EDIT_EMPLOYEE'\r\n\r\ntype LoadEmployees = {\r\n    type: typeof LOAD_EMPLOYEES,\r\n    payload: {\r\n        employees: Employee[]\r\n    }\r\n}\r\n\r\ntype AddEmployee = {\r\n    type: typeof ADD_EMPLOYEE\r\n    payload: {\r\n        employee: Employee\r\n    }\r\n}\r\n\r\ntype UpdateEmployee = {\r\n    type: typeof UPDATE_EMPLOYEE\r\n    payload: {\r\n        id: string,\r\n        employee: Employee\r\n    }\r\n}\r\n\r\ntype DeleteEmployee = {\r\n    type: typeof DELETE_EMPLOYEE\r\n    payload: {\r\n        id: string\r\n    }\r\n}\r\n\r\ntype EditEmployee = {\r\n    type: typeof EDIT_EMPLOYEE\r\n    payload: {\r\n        id: string\r\n    }\r\n}\r\n\r\ntype StopEditEmployee = {\r\n    type: typeof STOP_EDIT_EMPLOYEE\r\n}\r\n\r\ntype EmployeeAction = LoadEmployees | AddEmployee | UpdateEmployee | DeleteEmployee | EditEmployee | StopEditEmployee;\r\n\r\nexport default EmployeeAction;","import {\r\n  Table,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow, makeStyles, TableBody\r\n} from \"@material-ui/core\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectEmployeeIds} from \"../core/store/employee/employeeSelectors\";\r\nimport EmployeeTableRow from \"./EmployeeTableRow\";\r\nimport useThunkDispatch from \"../hooks/useThunkDispatch\";\r\nimport {loadEmployees} from \"../core/store/employee/employeeActions\";\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    headerCell: {\r\n        fontWeight: theme.typography.fontWeightBold\r\n    }\r\n}))\r\n\r\nconst labels = [\"Firstname\", \"Lastname\", \"Email\", \"AHV Nr.\", \"Birthdate\", \"Personal Nr.\", \"Department\", \"Job\", \"Job Description\"];\r\n\r\nconst EmployeeTable = () => {\r\n\r\n    const classes = useStyle();\r\n\r\n    const employeeIds = useSelector(selectEmployeeIds);\r\n    const dispatch = useThunkDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadEmployees());\r\n    }, [dispatch]);\r\n\r\n  return (\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {labels.map(label => (\r\n                <TableCell key={label} className={classes.headerCell}>\r\n                    {label}\r\n                </TableCell>\r\n            ))}\r\n            <TableCell />\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n            {employeeIds.map(id => (\r\n                <EmployeeTableRow id={id} key={id} />\r\n            ))}\r\n        </TableBody>\r\n      </Table>\r\n  );\r\n};\r\n\r\nexport default EmployeeTable;\r\n","import Department from \"./Department\";\r\nimport DomainEntity from \"./DomainEntity\";\r\nimport Job from \"./Job\";\r\nimport * as yup from 'yup';\r\nimport moment from 'moment';\r\nimport employeeService from \"../services/employeeService\";\r\n\r\ntype Employee = DomainEntity & {\r\n    id: string\r\n    firstName: string\r\n    lastName: string\r\n    email?: string\r\n    ahvNumber: string\r\n    birthDate: string\r\n    personalNumber: string\r\n    department?: Department\r\n    job?: Job\r\n}\r\n\r\nconst requiredMessage = \"Required\"\r\n\r\nexport const employeeSchema = (id?: string) =>  yup.object({\r\n    firstName: yup.string().required(requiredMessage),\r\n    lastName: yup.string().required(requiredMessage),\r\n    email: yup.string().email(\"Must be a valid email\"),\r\n    ahvNumber: yup.string().required(requiredMessage).matches(/^[0-9]{3}\\.[0-9]{4}\\.[0-9]{4}\\.[0-9]{2}$/, \"Must be of format xxx.xxxx.xxxx.xx\").test(\"ahvNumberTest\", \"AHV Nr. is already in use\", async value => {\r\n        if(value) {\r\n            return await employeeService.isAhvNumberAvailable(value, id)\r\n        }\r\n\r\n        return false\r\n    }),\r\n    birthDate: yup.string().required(requiredMessage).test(\"birthDateTest\", \"Must be in the past\", value => {\r\n        if(value) {\r\n            return moment(value).isBefore(moment())\r\n        }\r\n\r\n        return false\r\n    }),\r\n    personalNumber: yup.string().required(requiredMessage).test(\"personalNumberTest\", \"Personal Nr. is already in use\", async value => {\r\n        if(value) {\r\n            return await employeeService.isPersonalNumberAvailable(value, id)\r\n        }\r\n\r\n        return false\r\n    }),\r\n    department: yup.object({\r\n        id: yup.mixed().notOneOf([-1], \"Required\")\r\n    }).required(requiredMessage),\r\n    job: yup.object({\r\n        id: yup.string().required()\r\n    })\r\n})\r\n\r\nexport default Employee","import Department from \"../models/Department\";\r\nimport { ReadService, ReadServiceImpl } from \"./serviceGenerics\";\r\n\r\ninterface DepartmentService extends ReadService<Department> {\r\n\r\n}\r\n\r\nconst departmentService: DepartmentService = new ReadServiceImpl(\"/departments\");\r\n\r\nexport default departmentService;","import { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\"\r\nimport { loadDepartments } from \"../core/store/department/departmentActions\";\r\nimport { RootState } from \"../core/store/rootReducer\"\r\nimport useThunkDispatch from \"./useThunkDispatch\";\r\n\r\nconst useDepartments = () => {\r\n    const departments = useSelector((state: RootState) => state.departments.all);\r\n    const dispatch = useThunkDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadDepartments());\r\n    }, [dispatch])\r\n\r\n    return departments;\r\n}\r\n\r\nexport default useDepartments;","import Department from \"../../models/Department\";\r\nimport DepartmentAction, {LOAD_DEPARTMENTS} from \"./departmentActionTypes\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootAction, RootState} from \"../rootReducer\";\r\nimport departmentService from \"../../services/departmentService\";\r\n\r\nconst load: (departments: Department[]) => DepartmentAction = departments => ({\r\n    type: LOAD_DEPARTMENTS,\r\n    payload: {\r\n        departments\r\n    }\r\n})\r\n\r\nexport const loadDepartments: () => ThunkAction<Promise<void>, RootState, void, RootAction> = () => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    if(!state.departments.loaded) {\r\n        return departmentService.findAll()\r\n            .then(res => res.data)\r\n            .then(departments => {\r\n                dispatch(load(departments))\r\n            })\r\n    } else {\r\n        return Promise.resolve();\r\n    }\r\n}","import Department from \"../../models/Department\";\r\n\r\nexport const LOAD_DEPARTMENTS = 'LOAD_DEPARTMENTS'\r\n\r\ntype LoadDepartments = {\r\n    type: typeof LOAD_DEPARTMENTS\r\n    payload: {\r\n        departments: Department[]\r\n    }\r\n}\r\n\r\ntype DepartmentAction = LoadDepartments\r\n\r\nexport default DepartmentAction","import Job from \"../models/Job\";\r\nimport { ReadService, ReadServiceImpl } from \"./serviceGenerics\";\r\n\r\ninterface JobService extends ReadService<Job> {\r\n\r\n}\r\n\r\nconst jobService: JobService = new ReadServiceImpl(\"/jobs\");\r\n\r\nexport default jobService;","import { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\"\r\nimport { loadJobs } from \"../core/store/job/jobActions\";\r\nimport { RootState } from \"../core/store/rootReducer\"\r\nimport useThunkDispatch from \"./useThunkDispatch\";\r\n\r\nconst useJobs = () => {\r\n    const jobs = useSelector((state: RootState) => state.jobs.all)\r\n    const dispatch = useThunkDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadJobs())\r\n    }, [dispatch])\r\n\r\n    return jobs;\r\n}\r\n\r\nexport default useJobs","import { ThunkAction } from \"redux-thunk\";\r\nimport Job from \"../../models/Job\";\r\nimport jobService from \"../../services/jobService\";\r\nimport { RootAction, RootState } from \"../rootReducer\";\r\nimport { JobAction, LOAD_JOBS } from \"./jobActionTypes\";\r\n\r\nconst load: (jobs: Job[]) => JobAction = jobs => ({\r\n    type: LOAD_JOBS,\r\n    payload: {\r\n        jobs\r\n    }\r\n})\r\n\r\nexport const loadJobs: () => ThunkAction<Promise<void>, RootState, void, RootAction> = () => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    if(!state.jobs.loaded) {\r\n        return jobService.findAll()\r\n            .then(res => res.data)\r\n            .then(jobs => {\r\n                dispatch(load(jobs));\r\n            })\r\n    } else {\r\n        return Promise.resolve();\r\n    }\r\n}","import Job from \"../../models/Job\"\r\n\r\nexport const LOAD_JOBS = 'LOAD_JOBS'\r\n\r\ntype LoadJobs = {\r\n    type: typeof LOAD_JOBS\r\n    payload: {\r\n        jobs: Job[]\r\n    }\r\n}\r\n\r\nexport type JobAction = LoadJobs","import React, { FunctionComponent } from 'react'\r\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\r\nimport { FieldHookConfig, useField } from 'formik';\r\n\r\ntype FormikTextFieldProps = TextFieldProps & FieldHookConfig<any>\r\n\r\nconst FormikTextField: FunctionComponent<FormikTextFieldProps> = (props: FormikTextFieldProps) => {\r\n\r\n    const [field, meta] = useField(props);\r\n\r\n    const errorText = (meta.touched && meta.error) ? meta.error : undefined;\r\n\r\n    return (\r\n        <TextField {...props} {...field} error={!!errorText} helperText={errorText || props.helperText} />\r\n    )\r\n}\r\n\r\nFormikTextField.defaultProps = {\r\n    variant: \"outlined\",\r\n    fullWidth: true,\r\n    color: \"primary\"\r\n}\r\n\r\nexport default FormikTextField","import { Grid, MenuItem } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport useDepartments from \"../hooks/useDepartments\";\r\nimport useJobs from \"../hooks/useJobs\";\r\nimport FormikTextField from \"./FormikTextField\";\r\n\r\nconst EmployeeFields = () => {\r\n\r\n    const departments = useDepartments();\r\n    const jobs = useJobs();\r\n\r\n    return (\r\n        <Grid container direction=\"row\" spacing={2}>\r\n            <Grid item xs={12}>\r\n                <FormikTextField name=\"firstName\" label=\"Firstname\" autoFocus />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <FormikTextField name=\"lastName\" label=\"Lastname\" />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <FormikTextField name=\"email\" label=\"Email\" type=\"email\" />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <FormikTextField name=\"ahvNumber\" label=\"AHV Nr.\" helperText=\"Format: xxx.xxxx.xxxx.xx\" />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {<FormikTextField\r\n                    name=\"birthDate\"\r\n                    label=\"Birth date\"\r\n                    type=\"date\"\r\n                    InputLabelProps={{\r\n                        shrink: true\r\n                    }}\r\n                />}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <FormikTextField\r\n                    name=\"personalNumber\"\r\n                    label=\"Personal Nr.\"\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <FormikTextField\r\n                    name=\"department.id\"\r\n                    label=\"Department\"\r\n                    select\r\n                >\r\n                    <MenuItem value={-1} disabled>\r\n                        <em>Please select</em>\r\n                    </MenuItem>\r\n                    {departments.map(department => (\r\n                        <MenuItem key={department.id} value={department.id}>\r\n                            {department.name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </FormikTextField>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <FormikTextField\r\n                    name=\"job.id\"\r\n                    label=\"Job\"\r\n                    select\r\n                >\r\n                    <MenuItem value={-1}>\r\n                        <em>No job</em>\r\n                    </MenuItem>\r\n                    {jobs.map(job => (\r\n                        <MenuItem key={job.id} value={job.id}>\r\n                            {job.name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </FormikTextField>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default EmployeeFields;\r\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, makeStyles } from '@material-ui/core'\r\nimport { Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport Employee, { employeeSchema } from '../core/models/Employee'\r\nimport { createEmployee } from '../core/store/employee/employeeActions'\r\nimport useThunkDispatch from '../hooks/useThunkDispatch'\r\nimport EmployeeFields from './EmployeeFields'\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    actions: {\r\n        padding: theme.spacing(1, 3)\r\n    }\r\n}))\r\n\r\ntype CreateEmployeeDialogProps = {\r\n    open: boolean,\r\n    onClose: () => void\r\n}\r\n\r\nconst emptyEmployee: Employee = {\r\n    id: undefined!,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    ahvNumber: \"\",\r\n    birthDate: undefined!,\r\n    personalNumber: \"\",\r\n    department: {\r\n        id: -1, \r\n        name: \"\"\r\n    },\r\n    job: {\r\n        id: -1,\r\n        name: \"\"\r\n    }\r\n}\r\n\r\nconst CreateEmployeeDialog = (props: CreateEmployeeDialogProps) => {\r\n\r\n    const {onClose} = props;\r\n\r\n    const classes = useStyle();\r\n\r\n    const dispatch = useThunkDispatch();\r\n\r\n    const handleSubmit = (employee: Employee) => {\r\n        dispatch(createEmployee(employee))\r\n        onClose();\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            {...props}\r\n        >\r\n            <DialogTitle>Create new employee</DialogTitle>\r\n            <Formik\r\n                initialValues={emptyEmployee}\r\n                onSubmit={handleSubmit}\r\n                validationSchema={employeeSchema()}\r\n            >\r\n                <Form>\r\n                    <DialogContent>\r\n                        <EmployeeFields />\r\n                    </DialogContent>\r\n                    <DialogActions className={classes.actions}>\r\n                        <Button color=\"primary\" variant=\"outlined\" onClick={onClose}>Cancel</Button>\r\n                        <Button color=\"primary\" variant=\"contained\" type=\"submit\">Save</Button> \r\n                    </DialogActions>\r\n                </Form>\r\n            </Formik>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default CreateEmployeeDialog\r\n","import {IconButton, makeStyles, Toolbar} from \"@material-ui/core\";\r\nimport React, {useState, Fragment} from \"react\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CreateEmployeeDialog from \"./CreateEmployeeDialog\";\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex'\r\n    },\r\n    addButton: {\r\n        color: theme.palette.success.main\r\n    }\r\n}));\r\n\r\nconst EmployeeActionBar = () => {\r\n\r\n    const classes = useStyle();\r\n\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const openDialog = () => setDialogOpen(true);\r\n    const closeDialog = () => setDialogOpen(false);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Toolbar className={classes.root}>\r\n                <IconButton title=\"New Employee\" className={classes.addButton} onClick={openDialog}>\r\n                    <AddIcon />\r\n                </IconButton>\r\n            </Toolbar>\r\n            <CreateEmployeeDialog\r\n                open={dialogOpen}\r\n                onClose={closeDialog}\r\n            />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default EmployeeActionBar","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Employee, { employeeSchema } from \"../core/models/Employee\";\r\nimport { stopEditEmployee, updateEmployee } from \"../core/store/employee/employeeActions\";\r\nimport { selectSelectedEmployee } from \"../core/store/employee/employeeSelectors\";\r\nimport useThunkDispatch from \"../hooks/useThunkDispatch\";\r\nimport EmployeeFields from \"./EmployeeFields\";\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    actions: {\r\n        padding: theme.spacing(1, 3)\r\n    }\r\n}))\r\n\r\nconst EditEmployeeDialog = () => {\r\n    const classes = useStyle();\r\n\r\n    const dispatch = useThunkDispatch();\r\n    const employee = useSelector(selectSelectedEmployee);\r\n\r\n    const handleClose = () => {\r\n        dispatch(stopEditEmployee());\r\n    };\r\n\r\n    const handleSubmit = (employee: Employee) => {\r\n        dispatch(updateEmployee(employee))\r\n        .then(handleClose);\r\n    };\r\n\r\n    if(employee) {\r\n        return (\r\n            <Dialog open onClose={handleClose}>\r\n                <DialogTitle>\r\n                    Edit {employee.firstName} {employee.lastName}\r\n                </DialogTitle>\r\n                <Formik initialValues={employee} onSubmit={handleSubmit} validationSchema={employeeSchema(employee.id)}>\r\n                    <Form>\r\n                        <DialogContent>\r\n                            <EmployeeFields />\r\n                        </DialogContent>\r\n                        <DialogActions className={classes.actions}>\r\n                            <Button onClick={handleClose} variant=\"outlined\" color=\"primary\">Cancel</Button>\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\">Save</Button>\r\n                        </DialogActions>\r\n                    </Form>\r\n                </Formik>\r\n            </Dialog>\r\n        )\r\n    } else return null\r\n};\r\n\r\nexport default EditEmployeeDialog;\r\n","import React from 'react'\r\nimport EmployeeTable from '../components/EmployeeTable';\r\nimport {TableContainer} from \"@material-ui/core\";\r\nimport EmployeeActionBar from \"../components/EmployeeActionBar\";\r\nimport EditEmployeeDialog from '../components/EditEmployeeDialog';\r\n\r\nconst EmployeePage = () => {\r\n\r\n    return (\r\n        <TableContainer>\r\n            <EmployeeActionBar />\r\n            <EmployeeTable/>\r\n            <EditEmployeeDialog />\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default EmployeePage\r\n","import DomainEntity from \"./models/DomainEntity\";\r\n\r\nexport type StringMap<V> = {\r\n    [key: string]: V\r\n}\r\n\r\nexport const normalizeArray = <T extends DomainEntity>(array: T[]) => {\r\n    let byId: StringMap<T> = {};\r\n\r\n    array.forEach(value => {\r\n        byId[value.id] = value;\r\n    })\r\n\r\n    return {\r\n        byId,\r\n        allIds: array.map(value => value.id)\r\n    }\r\n}","import {normalizeArray, StringMap} from '../../util'\r\nimport Employee from '../../models/Employee'\r\nimport EmployeeAction, {ADD_EMPLOYEE, EDIT_EMPLOYEE, LOAD_EMPLOYEES, STOP_EDIT_EMPLOYEE, UPDATE_EMPLOYEE, DELETE_EMPLOYEE} from \"./employeeActionTypes\";\r\n\r\nexport type EmployeeState = {\r\n    byId: StringMap<Employee>,\r\n    allIds: string[],\r\n    selectedId?: string,\r\n    loaded: boolean\r\n}\r\n\r\nconst initialState: EmployeeState = {\r\n    byId: {},\r\n    allIds: [],\r\n    selectedId: undefined,\r\n    loaded: false\r\n}\r\n\r\nconst employeeReducer: (state: EmployeeState | undefined, action: EmployeeAction) => EmployeeState = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOAD_EMPLOYEES:\r\n            return {\r\n                ...state,\r\n                ...normalizeArray(action.payload.employees),\r\n                loaded: true\r\n            }\r\n        case ADD_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                allIds: [...state.allIds, action.payload.employee.id],\r\n                byId: {\r\n                    ...state.byId,\r\n                    [action.payload.employee.id]: action.payload.employee\r\n                }\r\n            }\r\n        case UPDATE_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                byId: {\r\n                    ...state.byId,\r\n                    [action.payload.id]: action.payload.employee\r\n                }\r\n            }\r\n        case EDIT_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                selectedId: action.payload.id\r\n            }\r\n        case STOP_EDIT_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                selectedId: undefined\r\n            }\r\n        case DELETE_EMPLOYEE:\r\n            return removeEmployee(state, action.payload.id)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst removeEmployee = (state: EmployeeState, id: string) => {\r\n    let byId = {...state.byId}\r\n    \r\n    delete byId[id]\r\n\r\n    return {\r\n        ...state,\r\n        byId,\r\n        allIds: state.allIds.filter(eId => eId !== id)\r\n    }\r\n}\r\n\r\nexport default employeeReducer;","import Department from \"../../models/Department\";\r\nimport DepartmentAction, { LOAD_DEPARTMENTS } from \"./departmentActionTypes\";\r\n\r\ntype DepartmentState = {\r\n    all: Department[],\r\n    loaded: boolean\r\n}\r\n\r\nconst initialState: DepartmentState = {\r\n    all: [],\r\n    loaded: false\r\n}\r\n\r\nconst departmentReducer: (state: DepartmentState | undefined, action: DepartmentAction) => DepartmentState = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOAD_DEPARTMENTS:\r\n            return {\r\n                ...state,\r\n                all: action.payload.departments,\r\n                loaded: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default departmentReducer;","import Job from \"../../models/Job\";\r\nimport { JobAction, LOAD_JOBS } from \"./jobActionTypes\";\r\n\r\nexport type JobState = {\r\n    all: Job[],\r\n    loaded: boolean\r\n}\r\n\r\nconst initialState: JobState = {\r\n    all: [],\r\n    loaded: false\r\n}\r\n\r\nconst jobReducer: (state: JobState | undefined, action: JobAction) => JobState = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOAD_JOBS:\r\n            return {\r\n                ...state,\r\n                all: action.payload.jobs,\r\n                loaded: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default jobReducer;","import {combineReducers} from \"redux\";\r\nimport employeeReducer from \"./employee/employeeReducer\";\r\nimport EmployeeAction from \"./employee/employeeActionTypes\";\r\nimport departmentReducer from \"./department/departmentReducer\";\r\nimport DepartmentAction from \"./department/departmentActionTypes\";\r\nimport jobReducer from \"./job/jobReducer\";\r\nimport { JobAction } from \"./job/jobActionTypes\";\r\n\r\nconst rootReducer = combineReducers({\r\n    employees: employeeReducer,\r\n    departments: departmentReducer,\r\n    jobs: jobReducer\r\n})\r\n\r\nexport type RootAction = EmployeeAction | DepartmentAction | JobAction\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n    }\r\n\r\n    var window: Window & typeof globalThis\r\n}\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(...middlewares)));\r\n\r\nexport default store;","import React from 'react'\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport EmployeePage from './pages/EmployeePage';\r\nimport store from \"./core/store/store\";\r\nimport {Provider} from 'react-redux';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"\" component={EmployeePage}/>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}